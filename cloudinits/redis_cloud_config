#cloud-config
users:
  # TODO: coreos-ssh-import-github deprecated replace it with new remote import
  - name: ali
    coreos-ssh-import-github: alirizakeles
coreos:
  etcd:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new
    discovery: https://discovery.etcd.io/b7375b46435f1ae92bff071d65aa78a6
    # use $public_ipv4 if your datacenter of choice does not support private networking
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
  fleet:
    public-ip: $private_ipv4   # used for fleetctl ssh command
    metadata: project=zaerp,disk=ssd,machineof=redis
  flannel:
    interface: $private_ipv4
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: flanneld.service
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "172.17.0.0/16" }'
      command: start

    # timezone settings. ntp use coreos default pools, just tune timezone
    # https://coreos.com/docs/cluster-management/setup/configuring-date-and-timezone/
    - name: settimezone.service
      command: start
      content: |
        [Unit]
        Description=Set the timezone

        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone Europe/Istanbul
        RemainAfterExit=yes
        Type=oneshot

    # not working for now, handle it manually.
    # sudo sysctl vm.overcommit_memory=1
    # https://github.com/coreos/coreos-cloudinit/issues/156
    #
    # - name: systemd-sysctl.service
    #   command: restart
    #   content: |
    #     [Unit]
    #     Description=Update sysctl values written by cloud-config
    #     [Service]
    #     ExecStart=/usr/lib/systemd/systemd-sysctl vm.overcommit_memory=1
    #

    - name: consul.service
      command: start
      content: |
        [Unit]
        Description=Consul
        Documentation=https://github.com/zetaops/zcloud/blob/master/docs/consul-service.md
        Requires=docker.service
        Requires=flanneld.service
        Requires=etcd.service
        After=etcd.service
        After=flanneld.service
        After=docker.service

        [Service]
        TimeoutStartSec=0
        Restart=always
        KillMode=none
        EnvironmentFile=/etc/environment
        Environment=DOCKER_REPO=quay.io/democracyworks/consul-coreos
        Environment=VERSION=2015041102
        Environment=CONTAINER=consul

        ExecStartPre=-/usr/bin/docker kill ${CONTAINER}
        ExecStartPre=-/usr/bin/docker rm ${CONTAINER}


        ExecStartPre=/usr/bin/docker pull ${DOCKER_REPO}:${VERSION}
        ExecStartPre=/usr/bin/docker pull cap10morgan/conntrack
        ExecStartPre=/usr/bin/docker run --net=host --privileged --rm cap10morgan/conntrack -F

        ExecStart=/bin/bash -c 'docker run --name ${CONTAINER} --restart=always \
          --volume /var/run/docker.sock:/var/run/docker.sock --hostname %H \
          -p 8300:8300 -p 8301:8301 -p 8301:8301/udp -p 8302:8302 -p 8302:8302/udp \
          -p 8400:8400 -p 8500:8500 -p 53:8600/udp \
          ${DOCKER_REPO}:${VERSION} ${COREOS_PRIVATE_IPV4} %m'

        ExecStop=/usr/bin/docker stop ${CONTAINER}
        ExecStopPost=-/usr/bin/etcdctl rm /consul.io/bootstrap/machines/%m
        
write_files:
  - path: /home/core/etc/environment
    permissions: 0755
    owner: core
    content: |
      # append envvars here..
      PROJECT="zaerp"
  - path: /home/core/bin/redis_cluster.sh
    permissions: 0755
    owner: core
    content: |
      #!/bin/bash
      # Walk through etcd keys including redis in /services directory
      # we are not interested in container's ip address, we can discover service just with hostname and hostport
      # hostname is part of key /services/redis/redis-t.c.zetaops-academic-erp.internal:redis_t:6379
      # hostport is part of value 172.17.0.3:49154
      # as registrator2etcd write service informations
      # first check masters, if exists a master, update etcd and make rest ones slave of this one.
      # check if exists masterless redises, then make one of it master and others slave of new master
      # elseif no redis remove etcd key

      make_master(){
          EXEC="docker run --name redis-cli --rm --env IP=\"$1\" --env PORT=\"$2\" redis sh -c 'exec redis-cli -h \$IP -p \$PORT slaveof no one'"
          echo $EXEC # just for logs in journalctl
          eval $EXEC
      }

      make_slave(){
          EXEC="docker run --name redis-cli --rm --env IP=\"$1\" --env PORT=\"$2\" redis sh -c 'exec redis-cli -h \$IP -p \$PORT slaveof $3 $4'"
          echo $EXEC # just for logs in journalctl
          eval $EXEC
      }

      e=0; f=0
      for i in $(etcdctl ls /services/redis); do
              KEY=$(etcdctl ls $i)
              arrKEY=( ${KEY//\// } )
              arrHOST=(${arrKEY[2]//:/ })
              REDIS_HOST=${arrHOST[0]}

              REDIS_IP_PORT=$(etcdctl get $i);
              arrIP=(${REDIS_IP_PORT//:/ })
              REDIS_PORT=${arrIP[1]}
              RET=$(docker run --name redis-check-master --rm --env IP=$REDIS_HOST --env PORT=$REDIS_PORT redis sh -c 'exec redis-cli -h $IP -p $PORT info replication' 2> /dev/null | grep "role:" | tr -d '[[:space:]]')
              #echo $RET
              if [ "$RET" ==  "role:master" ]; then
                  MASTERS[$e]="$REDIS_HOST $REDIS_PORT"
                  e+=1
              elif [ "$RET" == "role:slave" ]; then
                  SLAVES[$f]="$REDIS_HOST $REDIS_PORT"
                  f+=1
              else
                  echo 'no redis'
              fi
      done

      if [ "${#MASTERS[@]}" -gt  0 ]; then # master var..
         MASTER="${MASTERS[0]}" # sifirinci tek master olsun..
         if [ "${#MASTERS[@]}" -gt  1 ]; then # birden cok master varsa sonrakileri slave yap...
             for (( i = 1; i < ${#MASTERS[@]}; i++ )); do
               arrMASTER=($MASTER)
               arrMAS=( ${MASTERS[$i]} )
                     make_slave "${arrMASTER[0]}" "${arrMASTER[1]}" "${arrMAS[0]}" "${arrMAS[1]}"
             done
         fi
      fi


      if [ "${#SLAVES[@]}" -gt  0 ]; then # slave var..
          if [ -z "$MASTER" ]; then # hala master yoksa
              MASTER="${SLAVES[0]}" # sifirinci slave master olsun
              arrMAS=($MASTER)
              make_master "${arrMAS[0]}" "${arrMAS[1]}"

             for (( i = 1; i < ${#SLAVES[@]}; i++ )); do
                     arrSLA=( ${SLAVES[$i]} )
                     make_slave "${arrSLA[0]}" "${arrSLA[1]}" "${arrMAS[0]}" "${arrMAS[1]}"
             done


          else #master varsa butun slavelerin masteri olsun
             for (( i = 0; i < ${#SLAVES[@]}; i++ )); do
                     arrMASTER=($MASTER)
                     arrSLA=( ${SLAVES[$i]} )
                     make_slave "${arrSLA[0]}" "${arrSLA[1]}" "${arrMASTER[0]}" "${arrMASTER[1]}"
             done
          fi
      fi

      if [ -n "$MASTER" ]; then
          export REDIS_MASTER="$MASTER"
          etcdctl mkdir /zaerp/envs
          RR=$(etcdctl get /zaerp/envs/REDIS_MASTER)
          if [ -n "$RR" ]; then
              etcdctl update /zaerp/envs/REDIS_MASTER "$MASTER"
          else
              etcdctl set /zaerp/envs/REDIS_MASTER "$MASTER"
          fi
      else
          export REDIS_MASTER=""
          etcdctl mkdir /zaerp/envs
          etcdctl rm /zaerp/envs/REDIS_MASTER
          echo "Hic master yok, hic redis de yok"
      fi
