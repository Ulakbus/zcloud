#cloud-config
users:
  - name: ali
    coreos-ssh-import-github: alirizakeles

coreos:
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    discovery: https://discovery.etcd.io/3dcf7ed48c735d90519b656f94397670
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$public_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    heartbeat-interval: 50
    election-timeout: 250
    snapshot-count: 5000
  fleet:
    public-ip: $private_ipv4   # used for fleetctl ssh command
    metadata: project=zaerp,disk=ssd
  flannel:
    interface: $private_ipv4
  units:
    - name: etcd.service
      command: start
    - name: fleet.socket
      command: start
      drop-ins:
      - name: 30-ListenStream.conf
        content: |
          [Socket]
          ListenStream=49153
    - name: fleet.service
      command: start
    - name: flanneld.service
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "172.17.0.0/16" }'
      command: start

    - name: consul.service
      command: start
      content: |
        [Unit]
        Description=Consul
        Documentation=https://github.com/zetaops/zcloud/blob/master/docs/consul-service.md
        Requires=docker.service
        Requires=flanneld.service
        Requires=etcd.service
        After=etcd.service
        After=flanneld.service
        After=docker.service


        [Service]
        TimeoutStartSec=0
        Restart=always
        KillMode=none
        EnvironmentFile=/etc/environment
        Environment=DOCKER_REPO=quay.io/democracyworks/consul-coreos
        Environment=VERSION=2015041102
        Environment=CONTAINER=consul

        # make sure /etc/systemd/resolved.conf.d dir exists so we can add Consul's DNS resolver to system
        # ExecStartPre=/usr/bin/mkdir -p /etc/systemd/resolved.conf.d


        ExecStartPre=-/usr/bin/docker kill ${CONTAINER}
        ExecStartPre=-/usr/bin/docker rm ${CONTAINER}
        # ExecStartPre=-/bin/bash -c 'rm /etc/systemd/resolved.conf.d/00-consul-dns.conf && systemctl restart systemd-resolved'
        ExecStartPre=/usr/bin/docker pull ${DOCKER_REPO}:${VERSION}
        ExecStartPre=/usr/bin/docker pull cap10morgan/conntrack
        ExecStartPre=/usr/bin/docker run --net=host --privileged --rm cap10morgan/conntrack -F

        ExecStart=/bin/bash -c 'docker run --name ${CONTAINER} --restart=always \
          --volume /var/run/docker.sock:/var/run/docker.sock --hostname %H \
          -p 8300:8300 -p 8301:8301 -p 8301:8301/udp -p 8302:8302 -p 8302:8302/udp \
          -p 8400:8400 -p 8500:8500 -p 53:8600/udp \
          ${DOCKER_REPO}:${VERSION} ${COREOS_PRIVATE_IPV4} %m'


        # ExecStartPost=/bin/bash -c 'sleep 1; echo -e "[Resolve]\nDNS=$(docker inspect --format \'{{ .NetworkSettings.IPAddress }}\' ${CONTAINER})" > /etc/systemd/resolved.conf.d/00-consul-dns.conf && systemctl restart systemd-resolved'

        ExecStop=/usr/bin/docker stop ${CONTAINER}
        # ExecStopPost=/bin/bash -c 'rm /etc/systemd/resolved.conf.d/00-consul-dns.conf && systemctl restart systemd-resolved'
        ExecStopPost=-/usr/bin/etcdctl rm /consul.io/bootstrap/machines/%m
